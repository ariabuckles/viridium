var _div = function(a, b) { return Math.floor(a / b); };
var _else = {identifier: 'else'};
var _if = function(condition, trueLambda, optionalElse, falseLambda) {
    if (optionalElse != null && optionalElse != _else) {
        throw new Error('if called with third parameter != else');
    }
    if (condition != null && condition !== false) {
        return trueLambda.call(undefined);
    } else if (falseLambda != null) {
        return falseLambda.call(undefined);
    }
};
var _while = function(conditionLambda, bodyLambda) {
    while (conditionLambda.call(undefined)) {
        bodyLambda.call(undefined);
    }
}

var binary_search = (function(array, target, lower, upper, comparator) {
var mid = _div(((lower + upper) + 1), 2);
return _if((lower >= upper), (function() {
return lower;
}), _else, (function() {
return _if(comparator(mid), (function() {
return binary_search(array, target, lower, (mid - 1), comparator);
}), _else, (function() {
return binary_search(array, target, mid, upper, comparator);
}));
}));
});
var find_mountain_index_of = (function(array, target) {
var peak = binary_search(array, Infinity, 0, (array.length - 1), (function(index) {
return ((index > 0) && (array[(index - 1)] > array[index]));
}));
var left = binary_search(array, target, 0, peak, (function(index) {
return (target < array[index]);
}));
var right = binary_search(array, target, peak, (array.length - 1), (function(index) {
return (target > array[index]);
}));
return _if((array[left] === target), (function() {
return left;
}), _else, (function() {
return _if((array[right] === target), (function() {
return right;
}), _else, (function() {
return -1;
}));
}));
});
var arr = [1,
3,
5,
7,
9,
8,
6,
4,
2];
var i = 0;
_while((function() {
return (i < arr.length);
}), (function() {
console.log("testing", i, arr[i]);
var index = find_mountain_index_of(arr, arr[i]);
_if((index !== i), (function() {
console.error(((("index " + i) + " returned ") + index));
}));
i = (i + 1);
}));
