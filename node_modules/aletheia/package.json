{
  "name": "aletheia",
  "version": "0.0.2",
  "description": "aletheia ========",
  "bin": {
    "alc": "./lib/aletheia/alc"
  },
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jacktoole1/aletheia.git"
  },
  "author": {
    "name": "Jack Toole"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jacktoole1/aletheia/issues"
  },
  "devDependencies": {
    "jison": "~0.4.13",
    "mocha": "~1.18.2",
    "browserify": "~3.4.0"
  },
  "dependencies": {
    "underscore": ">=1.4.4",
    "source-map": "~0.1.33"
  },
  "readme": "aletheia\n========\n\nAletheia is an experimental compiled-to-javascript programming language.\n\n##### The goals of aletheia are to:\n1. encourage safety\n2. be concise\n3. interop with javascript seamlessly\n\nFor 1 and 2, Aletheia's philosopy is to \"make correct things easy, but make\nincorrect things hard\". For example, immutable variables require no prefix\nto declare them. However, mutable variables require a prefix for both\ndeclaration and mutation.\n\n##### Language features:\n * variables are immutable and local by default\n * extremely concise lambda syntax encourages a functional programming style\n * extensible control-flow structures\n\n##### Aletheia is quite alpha.\n\nWe're still missing some basic things, which we intend to implement in the\nfuture:\n * for loops (but you could write your own!)\n * compile time enforcement of immutability, references, or well, anything, yet :)\n * `return`ing from a function inside an if-block\n * macros\n * types\n\n## Examples\n### if statements\n\n    if ((1 + 1) == 2) [\n        console.log \"correct!\"\n    ]\n    \n### while loops\n\n    mutable i = 0\n    while [ret (i < 10)] [  // this is not the final syntax\n        console.log i\n        mutate i = i + 1\n    ]\n\n### function calls\n\n    console.log \"arg1\" \"arg2\"\n\n### function declarations\n\n    f = [ n | ret n + 1 ]\n    console.log (f 4)  // prints 5\n\n### fibonacci\n\n    fib = [ n |\n        mutable a = 1\n        mutable b = 0\n        mutable i = 0\n        while [ret (i < n)] [\n            old_b = b\n            mutate b = a + b\n            mutate a = old_b\n            mutate i = i + 1\n        ]\n        ret b\n    ]\n    \n## Setup / Installation\n\nAletheia is quite unstable currently, but if you'd like to play with it (which I pretty much don't recommend at this point), the setup instructions are:\n\nTo install the current semistable library version of the compiler\n\n    npm install -g aletheia\n    alc <input_file.al> <output_file.js>\n\nTo install the current (unstable) library version of the compiler\n\n    npm install -g git://github.com/jacktoole1/aletheia.git\n    alc <input_file.al> <output_file.js>\n\nTo run the library compiler from the git repo:\n\n    git clone https://github.com/jacktoole1/aletheia.git\n    ./aletheia/lib/aletheia/alc <source .al input file> <destination .js output file>\n\nTo create the latest bootstrapped compiler:\n\n    git clone https://github.com/jacktoole1/aletheia.git\n    cd aletheia/\n    npm install\n    make build\n    make test  # to run the tests\n    ./build/alc [source .al input file] [destination .js output file]  # our created compiler\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jacktoole1/aletheia",
  "_id": "aletheia@0.0.2",
  "_shasum": "ef9d870982ee85ebf94815046118fd8614dd1515",
  "_from": "aletheia@0.0.2",
  "_resolved": "https://registry.npmjs.org/aletheia/-/aletheia-0.0.2.tgz"
}
